[{"/home/rashad/Downloads/StockApp/stock-app/src/index.js":"1","/home/rashad/Downloads/StockApp/stock-app/src/App.js":"2","/home/rashad/Downloads/StockApp/stock-app/src/reportWebVitals.js":"3","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Home.js":"4","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/UserContext.js":"5","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Login.js":"6","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Register.js":"7","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Validation.js":"8","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/LoginNavbar.js":"9","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Watchlist.js":"10","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Navbar.js":"11"},{"size":579,"mtime":1608730714572,"results":"12","hashOfConfig":"13"},{"size":1766,"mtime":1608827597645,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1608263316996,"results":"15","hashOfConfig":"13"},{"size":2992,"mtime":1608819936266,"results":"16","hashOfConfig":"13"},{"size":116,"mtime":1608806884711,"results":"17","hashOfConfig":"13"},{"size":9427,"mtime":1608819368626,"results":"18","hashOfConfig":"13"},{"size":14294,"mtime":1608819031979,"results":"19","hashOfConfig":"13"},{"size":1309,"mtime":1608806888042,"results":"20","hashOfConfig":"13"},{"size":958,"mtime":1608819047426,"results":"21","hashOfConfig":"13"},{"size":1305,"mtime":1608827593381,"results":"22","hashOfConfig":"13"},{"size":735,"mtime":1608820116103,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"r1dsgz",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rashad/Downloads/StockApp/stock-app/src/index.js",["52"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["53","54"],"/home/rashad/Downloads/StockApp/stock-app/src/App.js",["55"],"/home/rashad/Downloads/StockApp/stock-app/src/reportWebVitals.js",[],"/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Home.js",["56","57","58","59","60","61","62"],"import React, { useEffect, useContext, useState } from \"react\";\nimport '../css/Home.css'\nimport Navbar from './LoginNavbar';\nimport TradingViewWidget, { Themes, BarStyles, HEIKIN_ASHI } from 'react-tradingview-widget';\nimport Register from \"./Register\";\nimport { UserContext } from \"./UserContext\";\nfunction Home() {\n\n\n\n    const { user, setUser } = useContext(UserContext);\n    var localUse = {\n        name: sessionStorage.getItem('sessionName'),\n        email: sessionStorage.getItem('sessionEmail'),\n        password: sessionStorage.getItem('sessionPassword'),\n        authenticated: sessionStorage.getItem('sessionAuthenticated')\n    }\n    console.log(`Home: sessionStorage: ${sessionStorage.getItem(\"sessionName\")}`)\n    console.log(`Home: sessionStorage: ${sessionStorage.getItem(\"sessionEmail\")}`)\n\n\n\n\n\n    const symbol = \"NASDAQ:TSLA\"\n    const [theme, setTheme] = useState('light');\n    const [themeString, setThemeString] = useState(\"Dark Mode\");\n    const [indicatorString, setIndicatorString] = useState(\"Indicators On\");\n    const [indicators, setIndicators] = useState('false');\n    const indicatorsOn = [\"BB@tv-basicstudies\", \"MACD@tv-basicstudies\", \"MASimple@tv-basicstudies\"]\n    const [buttonColor, setButtonColor] = useState('btn btn-light');\n\n\n\n\n    function changeTheme() {\n        if (theme === 'light') {\n            setTheme('dark');\n            setThemeString('Light Mode');\n            setButtonColor('btn btn-dark')\n        }\n        else {\n            setTheme('light');\n            setThemeString(\"Dark Mode\")\n            setButtonColor('btn btn-light');\n        }\n        console.log(\"Attempted theme change\");\n    }\n\n    function changeIndicators() {\n        if (indicatorString === \"Indicators On\") {\n            setIndicators(indicatorsOn);\n            setIndicatorString(\"Indicators Off\");\n\n        }\n        else {\n            setIndicators('false');\n            setIndicatorString(\"Indicators On\");\n        }\n    }\n\n\n    return (\n        <div>\n            <Navbar/>\n            <div className=\"chart\">\n                <div><h1>Welcome </h1>{localUse.email} {console.log(localUse.email)}</div>\n                <div className=\"tradingView\">\n                    <TradingViewWidget\n                        symbol={symbol}\n                        theme={theme}\n                        locale=\"en\"\n                        autosize\n                        BarStyles=\"HEIKIN_ASHI\"\n                        studies={indicators}\n                    />\n\n                </div>\n                <div class=\"chartButtons\">\n                    <div class=\"changeButton\">\n                        <button className={buttonColor} onClick={changeTheme}>{themeString}</button>\n                    </div>\n                    <div class=\"changeButton\">\n                        <button className={buttonColor} onClick={changeIndicators}>{indicatorString}</button>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n} export default Home; ","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/UserContext.js",["63","64","65"],"import React, { createContext, useEffect, useState } from 'react';\n\n\n\nexport const UserContext = createContext();\n\n\n","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Login.js",["66","67","68","69","70","71","72","73"],"import React, { Component, useContext, useEffect, useState } from 'react';\nimport { validateFields } from './Validation';\nimport classnames from 'classnames';\nimport { UserContext } from './UserContext';\nimport '../css/Login.css'\nimport axios from 'axios';\nimport { json } from 'body-parser';\nimport Navbar from './LoginNavbar';\n\n\n\nfunction Login() {\n    const { user, setUser } = useContext(UserContext);\n\n\n\n    const callServer = false;\n\n\n    const [email, setEmail] = useState({\n        value: '',\n        validateOnChange: false,\n        error: ''\n    });\n\n    const [password, setPassword] = useState({\n        value: '',\n        validateOnChange: false,\n        error: ''\n    });\n\n    const [submitCalled, setSubmitCalled] = useState(false);\n    const [allFieldsValidated, setAllFieldsValidated] = useState(false);\n\n\n\n    function loginFunction() {\n\n\n        console.log(`password.value before sending api request ${password.value}`)\n        axios.post(`/api/users/login/id/${email.value}/${password.value}`).then(res => {\n            if (res.data[0] === `access granted`) {\n                setUser({\n                    name: res.data[1],\n                    email: email.value,\n                    password: password.value,\n                    authenticated: true\n                });\n                console.log(`access granted ${res.data[1]}`);\n                window.location.href = '/home' ;\n            }\n        }).catch((err) => {\n            console.log(err)\n        });\n\n\n        sessionStorage.setItem('sessionName', user.name);\n        console.log(`Login: sessionStorage: ${sessionStorage.getItem(\"sessionName\")}`)\n        sessionStorage.setItem('sessionEmail', user.email);\n        console.log(`Login: sessionStorage: ${sessionStorage.getItem(\"sessionEmail\")}`)\n        sessionStorage.setItem('sessionAuthenticated', user.authenticated);\n\n        \n\n\n\n\n    }\n\n\n\n\n\n\n    /*\n     * validates the field onBlur if sumbit button is not clicked\n     * set the validateOnChange to true for that field\n     * check for error\n     */\n    function handleBlur(validationFunc, evt) {\n        const field = evt.target.name;\n\n        if (field === 'email' && email.validateOnChange === false && submitCalled === false) {\n            var temp = {\n                value: email.value,\n                validateOnChange: true,\n                error: validationFunc(email.value)\n            }\n            setEmail(temp);\n        }\n        else if (field === 'password' && password.validateOnChange === false && submitCalled === false) {\n            var temp = {\n                value: password.value,\n                validateOnChange: true,\n                error: validationFunc(password.value)\n            }\n            setPassword(temp);\n        }\n\n        return;\n    }\n\n\n\n    /*\n     * update the value in state for that field\n     * check for error if validateOnChange is true\n     */\n    function handleChange(validationFunc, evt) {\n        console.log(`handle change called`)\n        const field = evt.target.name;\n        console.log(field);\n        const fieldVal = evt.target.value;\n        console.log(email.value);\n\n\n        if (field === 'email' && email.validateOnChange === true) {\n            console.log('opta')\n            var temp = {\n                value: fieldVal,\n                validateOnChange: email.validateOnChange,\n                error: validationFunc(fieldVal)\n            }\n            setEmail(temp)\n        }\n        else if (field === 'email' && email.validateOnChange === false) {\n            console.log('optb')\n            var temp = {\n\n                value: fieldVal,\n                validateOnChange: email.validateOnChange,\n                error: ''\n            }\n\n            setEmail(temp);\n        }\n        else if (field === 'password' && password.validateOnChange === true) {\n            console.log('optc')\n            var temp = {\n                value: fieldVal,\n                validateOnChange: email.validateOnChange,\n                error: validationFunc(fieldVal)\n            }\n            setPassword(temp)\n        }\n        else if (field === 'password' && password.validateOnChange === false) {\n            console.log('optd')\n            var temp = {\n                value: fieldVal,\n                validateOnChange: email.validateOnChange,\n                error: ''\n            }\n            setPassword(temp);\n        }\n\n\n\n    }\n\n\n\n\n\n    /*\n     * validate all fields\n     * check if all fields are valid if yes then submit the Form\n     * otherwise set errors for the feilds in the state\n     */\n    function handleSubmit(evt) {\n        console.log(\"handle submit called\");\n        evt.preventDefault();\n        // validate all fields\n        console.log(`${email.value}  ${password.value}`);\n        const emailError = validateFields.validateEmail(email.value);\n        const passwordError = validateFields.validatePassword(password.value);\n\n        if ([emailError, passwordError].every(e => e === false)) {\n            // no errors submit the form\n            console.log(`email error and pass word error are false`)\n            loginFunction(email.value, password.value);\n\n            // clear state and show all fields are validated\n            setAllFieldsValidated(true);\n            showAllFieldsValidated();\n        } else {\n            // update the state with errors\n\n            setEmail(email.value, true, emailError);\n            setPassword(password.value, true, passwordError);\n\n        }\n    }\n\n    function showAllFieldsValidated() {\n        setTimeout(() => {\n            setAllFieldsValidated(false);\n        }, 1500);\n    }\n\n    function moveToRegister() {\n        window.location.href = \"/Register/\"\n    }\n\n\n\n\n\n    return (\n        <div> \n            <Navbar/>\n            <div className=\"Form col-md-8 col-lg-6\">\n                <div className=\"card\">\n\n                    <h4 className=\"card-title text-center\">{user.email}</h4>\n\n\n                    <div className=\"card-body\">\n                        {allFieldsValidated && (\n                            <p className=\"text-success text-center\">\n                                Success, All fields are validated\n                            </p>\n                        )}\n\n                        {/* Form Starts Here */}\n                        <form onSubmit={evt => handleSubmit(evt)}>\n\n\n\n                            {/* Email field */}\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    value={email.value}\n                                    placeholder={\"Enter email here\"}\n                                    className={classnames(\n                                        'form-control',\n                                        { 'is-valid': email.error === false },\n                                        { 'is-invalid': email.error }\n                                    )}\n                                    onChange={evt =>\n                                        handleChange(validateFields.validateEmail, evt)\n                                    }\n                                    onBlur={evt =>\n                                        handleBlur(validateFields.validateEmail, evt)\n                                    }\n                                />\n                                <div className=\"invalid-feedback\">{email.error}</div>\n                            </div>\n\n                            {/* Password field */}\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    value={password.value}\n                                    placeholder=\"Enter your password\"\n                                    className={classnames(\n                                        'form-control',\n                                        { 'is-valid': password.error === false },\n                                        { 'is-invalid': password.error }\n                                    )}\n                                    onChange={evt =>\n                                        handleChange(validateFields.validatePassword, evt)\n                                    }\n                                    onBlur={evt =>\n                                        handleBlur(validateFields.validatePassword, evt)\n                                    }\n                                />\n                                <div className=\"invalid-feedback\">{password.error}</div>\n                            </div>\n\n\n\n                            <button className=\"btn btn-light \"\n                                onClick={moveToRegister}\n                                style={{ margin: '25px' }}>\n                                Sign Up\n                            </button>\n\n\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary \"\n                                onMouseDown={() => setSubmitCalled(true)}>\n                                Login\n                            </button>\n\n\n\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Login;","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Register.js",["74","75","76","77","78","79","80","81","82","83","84","85","86"],"import React, { Component, useContext , useState } from 'react';\nimport { validateFields } from './Validation';\nimport classnames from 'classnames';\nimport axios from 'axios';\nimport '../css/Register.css';\nimport Navbar from './LoginNavbar';\nimport { UserContext } from './UserContext';\n\n\n\n\n\n\nfunction Register() {\n\n    const {user , setUser} = useContext(UserContext); \n\n    const initialState = {\n        name: {\n            value: '',\n            validateOnChange: false,\n            error: ''\n        },\n        email: {\n            value: '',\n            validateOnChange: false,\n            error: ''\n        },\n        password: {\n            value: '',\n            validateOnChange: false,\n            error: ''\n        },\n        confirmPassword: {\n            value: \"\",\n            validateOnChange: false,\n            error: \"\"\n        },\n\n        submitCalled: false,\n        allFieldsValidated: false\n    };\n\n    const [name, setName] = useState({\n        value: '',\n        validateOnChange: false,\n        error: ''\n    });\n\n    const [email, setEmail] = useState({\n        value: '',\n        validateOnChange: false,\n        error: ''\n    });\n\n    const [password, setPassword] = useState({\n        value: '',\n        validateOnChange: false,\n        error: ''\n    });\n\n    const [confirmPassword, setConfirmPassword] = useState({\n        value: '',\n        validateOnChange: false,\n        error: ''\n    });\n\n    const [submitCalled, setSubmitCalled] = useState(false);\n    const [allFieldsValidated, setAllFieldsValidated] = useState(false);\n\n    function registerFunction(name, email, pass) {\n        var Ticker = \"AAPL\"\n        var Market = \"NASDAQ\"\n        var Notes = [\n            \"Buy\",\n            \"Sell\"\n        ]\n\n\n        \n\n\n        axios.post(`/api/users/register/newUser/${name}/${email}/${pass}/stock/${Ticker}/${Market}/Notes/${Notes}`).then(res => {\n            console.log(res);\n        }).catch((err) => {\n            console.log(err);\n        })\n\n        //const [user, setUser] = this.context; \n\n        //setUser({\n\n    }\n\n    /*\n     * validates the field onBlur if sumbit button is not clicked\n     * set the validateOnChange to true for that field\n     * check for error\n     */\n    function handleBlur(validationFunc, evt) {\n        const field = evt.target.name;\n\n        if (field === 'name' && name.validateOnChange === false && submitCalled === false) {\n            var temp = {\n                value: name.value,\n                validateOnChange: true,\n                error: validationFunc(name.value)\n            }\n            setName(temp);\n        }\n        else if (field === 'email' && email.validateOnChange === false && submitCalled === false) {\n            var temp = {\n                value: email.value,\n                validateOnChange: true,\n                error: validationFunc(email.value)\n            }\n            setEmail(temp);\n        }\n        else if (field === 'password' && password.validateOnChange === false && submitCalled === false) {\n            var temp = {\n                value: password.value,\n                validateOnChange: true,\n                error: validationFunc(password.value)\n            }\n            setPassword(temp);\n        }\n        else if (field === 'confirmPassword' && password.validateOnChange === false && submitCalled === false) {\n            var temp = {\n                value: password.value,\n                validateOnChange: true,\n                error: validationFunc(password.value, confirmPassword.value)\n            }\n            setPassword(temp);\n        }\n\n        return;\n    }\n\n    /*\n     * update the value in state for that field\n     * check for error if validateOnChange is true\n     */\n    function handleChange(validationFunc, evt) {\n        console.log(`handle change called`)\n        const field = evt.target.name;\n        console.log(field);\n        const fieldVal = evt.target.value;\n        console.log(email.value);\n\n        if (field === 'name' && name.validateOnChange === true) {\n\n            var temp = {\n                value: fieldVal,\n                validateOnChange: name.validateOnChange,\n                error: validationFunc(fieldVal)\n            }\n            setName(temp)\n        }\n        else if (field === 'name' && name.validateOnChange === false) {\n\n            var temp = {\n                value: fieldVal,\n                validateOnChange: name.validateOnChange,\n                error: ''\n            }\n\n            setName(temp);\n        }\n\n        else if (field === 'email' && email.validateOnChange === true) {\n\n            var temp = {\n                value: fieldVal,\n                validateOnChange: email.validateOnChange,\n                error: validationFunc(fieldVal)\n            }\n            setEmail(temp)\n        }\n        else if (field === 'email' && email.validateOnChange === false) {\n\n            var temp = {\n\n                value: fieldVal,\n                validateOnChange: email.validateOnChange,\n                error: ''\n            }\n            setEmail(temp);\n        }\n        else if (field === 'password' && password.validateOnChange === true) {\n\n            var temp = {\n                value: fieldVal,\n                validateOnChange: password.validateOnChange,\n                error: validationFunc(fieldVal)\n            }\n            setPassword(temp)\n        }\n        else if (field === 'password' && password.validateOnChange === false) {\n\n            var temp = {\n                value: fieldVal,\n                validateOnChange: password.validateOnChange,\n                error: ''\n            }\n            setPassword(temp);\n        }\n        else if (field === 'confirmPassword' && confirmPassword.validateOnChange === true) {\n\n            var temp = {\n                value: fieldVal,\n                validateOnChange: confirmPassword.validateOnChange,\n                error: validationFunc(password.value, fieldVal)\n            }\n            setConfirmPassword(temp)\n        }\n        else if (field === 'confirmPassword' && confirmPassword.validateOnChange === false) {\n\n            var temp = {\n                value: fieldVal,\n                validateOnChange: confirmPassword.validateOnChange,\n                error: ''\n            }\n            setConfirmPassword(temp);\n        }\n\n    }\n\n\n\n\n\n    /*\n     * validate all fields\n     * check if all fields are valid if yes then submit the Form\n     * otherwise set errors for the feilds in the state\n     */\n    function handleSubmit(evt) {\n        evt.preventDefault();\n        // validate all fields\n\n        const nameError = validateFields.validateName(name.value);\n        const emailError = validateFields.validateEmail(email.value);\n        const passwordError = validateFields.validatePassword(password.value);\n        console.log(`handle submit ${confirmPassword.value} ${password.value} `)\n        const confirmPasswordError = validateFields.validateConfirmPassword(password.value, confirmPassword.value);\n        if ([nameError, emailError, passwordError, confirmPasswordError].every(e => e === false)) {\n            // no errors submit the form\n            registerFunction(name.value, email.value, password.value);\n\n            // clear state and show all fields are validated\n            setName(initialState.email);\n            setEmail(initialState.email);\n            setPassword(initialState.password);\n            setConfirmPassword(initialState.confirmPassword);\n            setSubmitCalled(false);\n            setAllFieldsValidated(true)\n            showAllFieldsValidated();\n        } else {\n            // update the state with errors\n\n            var n = {\n                value: name.value,\n                validateOnChange: true,\n                error: nameError\n            }\n            setName(n)\n            var e = {\n                value: email.value,\n                validateOnChange: true,\n                error: emailError\n            }\n            setEmail(e)\n            var p = {\n                value : password.value,\n                validateOnChange: true,\n                error: passwordError\n            }\n            setPassword(p)\n            var cp = {\n                value : confirmPassword.value,\n                validateOnChange: true,\n                error: confirmPasswordError\n            }\n            setConfirmPassword(cp) \n        }\n\n    }\n\n    function showAllFieldsValidated() {\n        setTimeout(() => {\n            setAllFieldsValidated(false);\n        }, 1500);\n    }\n\n    function moveToLogin() {\n        window.location.href = \"/login/\"\n    }\n\n\n\n\n\n\n    \n    return (\n        <div>\n        \n        <Navbar/>\n        <div className=\"Form col-md-8 col-lg-6\">\n            <div className=\"card\">\n\n                <h4 className=\"card-title text-center\">Sign Up</h4>\n\n\n                <div className=\"card-body\">\n                    {allFieldsValidated && (\n                        <p className=\"text-success text-center\">\n                            Success, All fields are validated\n                        </p>\n                    )}\n\n                    {/* Form Starts Here */}\n                    <form onSubmit={evt => handleSubmit(evt)}>\n\n                        {/* Name field */}\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                name=\"name\"\n                                value={name.value}\n                                placeholder=\"Enter your name\"\n                                className={classnames(\n                                    'form-control',\n                                    { 'is-valid': name.error === false },\n                                    { 'is-invalid': name.error }\n                                )}\n                                onChange={evt =>\n                                    handleChange(validateFields.validateName, evt)\n                                }\n                                onBlur={evt =>\n                                    handleBlur(validateFields.validateName, evt)\n                                }\n                            />\n                            <div className=\"invalid-feedback\">{name.error}</div>\n                        </div>\n\n                        {/* Email field */}\n                        <div className=\"form-group\">\n                            <input\n                                type=\"email\"\n                                name=\"email\"\n                                value={email.value}\n                                placeholder=\"Enter your email\"\n                                className={classnames(\n                                    'form-control',\n                                    { 'is-valid': email.error === false },\n                                    { 'is-invalid': email.error }\n                                )}\n                                onChange={evt =>\n                                    handleChange(validateFields.validateEmail, evt)\n                                }\n                                onBlur={evt =>\n                                    handleBlur(validateFields.validateEmail, evt)\n                                }\n                            />\n                            <div className=\"invalid-feedback\">{email.error}</div>\n                        </div>\n\n                        {/* Password field */}\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                name=\"password\"\n                                value={password.value}\n                                placeholder=\"Enter your password\"\n                                className={classnames(\n                                    'form-control',\n                                    { 'is-valid': password.error === false },\n                                    { 'is-invalid': password.error }\n                                )}\n                                onChange={evt =>\n                                    handleChange(validateFields.validatePassword, evt)\n                                }\n                                onBlur={evt =>\n                                    handleBlur(validateFields.validatePassword, evt)\n                                }\n                            />\n                            <div className=\"invalid-feedback\">{password.error}</div>\n                        </div>\n                        {/* ConfirmPassword field */}\n                        <div className=\"form-group\">\n\n                            <input\n                                type=\"password\"\n                                name=\"confirmPassword\"\n                                value={confirmPassword.value}\n                                placeholder=\"Confirm\"\n                                className={classnames(\n                                    'form-control',\n                                    { 'is-valid': confirmPassword.error === false },\n                                    { 'is-invalid': confirmPassword.error }\n                                )}\n                                onChange={evt =>\n                                    handleChange(validateFields.validateConfirmPassword, evt)\n                                }\n                                onBlur={evt =>\n                                    handleBlur(validateFields.validateConfirmPassword, evt)\n                                }\n                            />\n                            <div className=\"invalid-feedback\">{confirmPassword.error}</div>\n                        </div>\n\n\n                        <button className=\"btn btn-light \"\n                            onClick={moveToLogin}\n                            style={{ margin: '25px' }}>\n                            Login\n                            </button>\n\n\n\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary \"\n                            onMouseDown={() => setSubmitCalled(true)}>\n                            Sign Up\n                            </button>\n\n\n\n                    </form>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n}\n\n\nexport default Register;","/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Validation.js",[],"/home/rashad/Downloads/StockApp/stock-app/src/Components/js/LoginNavbar.js",[],"/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Watchlist.js",["87","88","89"],"/home/rashad/Downloads/StockApp/stock-app/src/Components/js/Navbar.js",[],{"ruleId":"90","severity":1,"message":"91","line":7,"column":8,"nodeType":"92","messageId":"93","endLine":7,"endColumn":17},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"90","severity":1,"message":"98","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"99","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"100","line":4,"column":29,"nodeType":"92","messageId":"93","endLine":4,"endColumn":35},{"ruleId":"90","severity":1,"message":"101","line":4,"column":37,"nodeType":"92","messageId":"93","endLine":4,"endColumn":46},{"ruleId":"90","severity":1,"message":"102","line":4,"column":48,"nodeType":"92","messageId":"93","endLine":4,"endColumn":59},{"ruleId":"90","severity":1,"message":"103","line":5,"column":8,"nodeType":"92","messageId":"93","endLine":5,"endColumn":16},{"ruleId":"90","severity":1,"message":"104","line":11,"column":13,"nodeType":"92","messageId":"93","endLine":11,"endColumn":17},{"ruleId":"90","severity":1,"message":"105","line":11,"column":19,"nodeType":"92","messageId":"93","endLine":11,"endColumn":26},{"ruleId":"90","severity":1,"message":"106","line":1,"column":8,"nodeType":"92","messageId":"93","endLine":1,"endColumn":13},{"ruleId":"90","severity":1,"message":"99","line":1,"column":32,"nodeType":"92","messageId":"93","endLine":1,"endColumn":41},{"ruleId":"90","severity":1,"message":"107","line":1,"column":43,"nodeType":"92","messageId":"93","endLine":1,"endColumn":51},{"ruleId":"90","severity":1,"message":"108","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"99","line":1,"column":40,"nodeType":"92","messageId":"93","endLine":1,"endColumn":49},{"ruleId":"90","severity":1,"message":"109","line":7,"column":10,"nodeType":"92","messageId":"93","endLine":7,"endColumn":14},{"ruleId":"90","severity":1,"message":"110","line":17,"column":11,"nodeType":"92","messageId":"93","endLine":17,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":92,"column":17,"nodeType":"92","messageId":"113","endLine":92,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":128,"column":17,"nodeType":"92","messageId":"113","endLine":128,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":139,"column":17,"nodeType":"92","messageId":"113","endLine":139,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":148,"column":17,"nodeType":"92","messageId":"113","endLine":148,"endColumn":21},{"ruleId":"90","severity":1,"message":"108","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"104","line":16,"column":12,"nodeType":"92","messageId":"93","endLine":16,"endColumn":16},{"ruleId":"90","severity":1,"message":"105","line":16,"column":19,"nodeType":"92","messageId":"93","endLine":16,"endColumn":26},{"ruleId":"111","severity":1,"message":"112","line":112,"column":17,"nodeType":"92","messageId":"113","endLine":112,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":120,"column":17,"nodeType":"92","messageId":"113","endLine":120,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":128,"column":17,"nodeType":"92","messageId":"113","endLine":128,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":161,"column":17,"nodeType":"92","messageId":"113","endLine":161,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":172,"column":17,"nodeType":"92","messageId":"113","endLine":172,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":181,"column":17,"nodeType":"92","messageId":"113","endLine":181,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":191,"column":17,"nodeType":"92","messageId":"113","endLine":191,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":200,"column":17,"nodeType":"92","messageId":"113","endLine":200,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":209,"column":17,"nodeType":"92","messageId":"113","endLine":209,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":218,"column":17,"nodeType":"92","messageId":"113","endLine":218,"endColumn":21},{"ruleId":"90","severity":1,"message":"114","line":10,"column":12,"nodeType":"92","messageId":"93","endLine":10,"endColumn":21},{"ruleId":"115","severity":1,"message":"116","line":18,"column":8,"nodeType":"117","endLine":18,"endColumn":10,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"119","line":37,"column":8,"nodeType":"117","endLine":37,"endColumn":28,"suggestions":"120"},"no-unused-vars","'bootstrap' is defined but never used.","Identifier","unusedVar","no-native-reassign",["121"],"no-negated-in-lhs",["122"],"'Navbar' is defined but never used.","'useEffect' is defined but never used.","'Themes' is defined but never used.","'BarStyles' is defined but never used.","'HEIKIN_ASHI' is defined but never used.","'Register' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","'Component' is defined but never used.","'json' is defined but never used.","'callServer' is assigned a value but never used.","no-redeclare","'temp' is already defined.","redeclared","'watchlist' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUser'. Either include it or remove the dependency array.","ArrayExpression",["123"],"React Hook useEffect has a missing dependency: 'getWatchlist'. Either include it or remove the dependency array.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [setUser]",{"range":"129","text":"130"},"Update the dependencies array to be: [getWatchlist, user.authenticated]",{"range":"131","text":"132"},[613,615],"[setUser]",[1170,1190],"[getWatchlist, user.authenticated]"]