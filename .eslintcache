[{"/home/rashad/Downloads/StockApp/stock-app/src/index.js":"1","/home/rashad/Downloads/StockApp/stock-app/src/App.js":"2","/home/rashad/Downloads/StockApp/stock-app/src/reportWebVitals.js":"3","/home/rashad/Downloads/StockApp/stock-app/src/Components/Home.js":"4","/home/rashad/Downloads/StockApp/stock-app/src/Components/Navbar.js":"5","/home/rashad/Downloads/StockApp/stock-app/src/Components/Login.js":"6","/home/rashad/Downloads/StockApp/stock-app/src/Components/Register.js":"7","/home/rashad/Downloads/StockApp/stock-app/src/Components/Validation.js":"8"},{"size":579,"mtime":1608528504171,"results":"9","hashOfConfig":"10"},{"size":654,"mtime":1608638774170,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1608263316996,"results":"12","hashOfConfig":"10"},{"size":2131,"mtime":1608638763947,"results":"13","hashOfConfig":"10"},{"size":981,"mtime":1608635340808,"results":"14","hashOfConfig":"10"},{"size":7357,"mtime":1608642901647,"results":"15","hashOfConfig":"10"},{"size":12162,"mtime":1608645018999,"results":"16","hashOfConfig":"10"},{"size":1309,"mtime":1608632359320,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"r1dsgz",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"/home/rashad/Downloads/StockApp/stock-app/src/index.js",["40"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["41","42"],"/home/rashad/Downloads/StockApp/stock-app/src/App.js",["43"],"import logo from './logo.svg';\nimport Home from './Components/Home';\nimport Navbar from './Components/Navbar';\nimport Login from './Components/Login';\nimport Register from './Components/Register';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/home/\" component={Home} exact />\n          <Route path=\"/login/\" component={Login} exact />\n          <Route path=\"/register\" component={Register} exact />\n        </Switch>\n\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/home/rashad/Downloads/StockApp/stock-app/src/reportWebVitals.js",[],"/home/rashad/Downloads/StockApp/stock-app/src/Components/Home.js",["44","45","46"],"import React, { useState } from \"react\";\nimport './Home.css'\nimport TradingViewWidget, { Themes, BarStyles, HEIKIN_ASHI } from 'react-tradingview-widget';\nfunction Home() {\n\n    const symbol = \"NASDAQ:TSLA\"\n    const [theme, setTheme] = useState('light');\n    const [themeString, setThemeString] = useState(\"Dark Mode\");\n    const [indicatorString, setIndicatorString] = useState(\"Indicators On\");\n    const [indicators, setIndicators] = useState('false');\n    const indicatorsOn = [\"BB@tv-basicstudies\", \"MACD@tv-basicstudies\", \"MASimple@tv-basicstudies\"]\n    const [buttonColor, setButtonColor] = useState('btn btn-light');\n\n    function changeTheme() {\n        if (theme === 'light') {\n            setTheme('dark');\n            setThemeString('Light Mode');\n            setButtonColor('btn btn-dark')\n        }\n        else {\n            setTheme('light');\n            setThemeString(\"Dark Mode\")\n            setButtonColor('btn btn-light');\n        }\n        console.log(\"Attempted theme change\");\n    }\n\n    function changeIndicators() {\n        if (indicatorString === \"Indicators On\") {\n            setIndicators(indicatorsOn);\n            setIndicatorString(\"Indicators Off\");\n\n        }\n        else {\n            setIndicators('false');\n            setIndicatorString(\"Indicators On\");\n        }\n    }\n\n\n    return (\n        <div className=\"chart\">\n\n            <div className=\"tradingView\">\n                <TradingViewWidget\n                    symbol={symbol}\n                    theme={theme}\n                    locale=\"en\"\n                    autosize\n                    BarStyles=\"HEIKIN_ASHI\"\n                    studies={indicators}\n                />\n\n            </div>\n            <div class=\"chartButtons\">\n                <div class=\"changeButton\">\n                    <button className={buttonColor} onClick={changeTheme}>{themeString}</button>\n                </div>\n                <div class=\"changeButton\">\n                    <button className={buttonColor} onClick={changeIndicators}>{indicatorString}</button>\n                </div>\n            </div>\n\n        </div>\n    );\n} export default Home; ","/home/rashad/Downloads/StockApp/stock-app/src/Components/Navbar.js",[],"/home/rashad/Downloads/StockApp/stock-app/src/Components/Login.js",[],"/home/rashad/Downloads/StockApp/stock-app/src/Components/Register.js",["47","48"],"import React, { Component } from 'react';\nimport { validateFields } from './Validation';\nimport classnames from 'classnames';\nimport axios from 'axios';\nimport './Register.css';\n\nconst initialState = {\n    name: {\n        value: '',\n        validateOnChange:\n            false,\n        error: ''\n    },\n    email: {\n        value: '',\n        validateOnChange: false,\n        error: ''\n    },\n    password: {\n        value: '',\n        validateOnChange: false,\n        error: ''\n    },\n    confirmPassword: {\n        value: \"\",\n        validateOnChange: false,\n        error: \"\"\n    },\n\n    submitCalled: false,\n    allFieldsValidated: false\n};\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = initialState;\n    }\n\n    registerFunction(name, email, password) {\n        var defaultStock = {\n            Ticker: \"AAPL\",\n            Market: \"NASDAQ\",\n            Notes: [\"Buy\"]\n        }\n        \n        var name = name\n        var email= email\n        var pass = password\n        \n        \n        axios.post(`/api/users/register/${name}/${email}/${pass}/${defaultStock}`).then(res => {\n            console.log(res);\n        }).catch((err) => {\n            console.log(err);\n        })\n    }\n\n    /*\n     * validates the field onBlur if sumbit button is not clicked\n     * set the validateOnChange to true for that field\n     * check for error\n     */\n    handleBlur(validationFunc, evt) {\n        const field = evt.target.name;\n        // validate onBlur only when validateOnChange for that field is false\n        // because if validateOnChange is already true there is no need to validate onBlur\n        if (\n            this.state[field]['validateOnChange'] === false &&\n            this.state.submitCalled === false\n        ) {\n            this.setState(state => ({\n                [field]: {\n                    ...state[field],\n                    validateOnChange: true,\n                    error: validationFunc(state[field].value)\n                }\n            }));\n        }\n        return;\n    }\n\n    /*\n     * update the value in state for that field\n     * check for error if validateOnChange is true\n     */\n    handleChange(validationFunc, evt) {\n        const field = evt.target.name;\n        const fieldVal = evt.target.value;\n        this.setState(state => ({\n            [field]: {\n                ...state[field],\n                value: fieldVal,\n                error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\n            }\n        }));\n    }\n\n    handleConfirmPassChange(validationFunc, evt, pass) {\n        const field = evt.target.name;\n        const fieldVal = evt.target.value;\n        console.log(`confirmPassChange ${pass} ${fieldVal} `);\n        this.setState(state => ({\n            [field]: {\n                ...state[field],\n                value: fieldVal,\n                error: state[field]['validateOnChange'] ? validationFunc(pass, fieldVal) : ''\n            }\n        }));\n    }\n\n    handleConfirmPassBlur(validationFunc, evt, pass) {\n\n        const field = evt.target.name;\n        // validate onBlur only when validateOnChange for that field is false\n        // because if validateOnChange is already true there is no need to validate onBlur\n        if (\n            this.state[field]['validateOnChange'] === false &&\n            this.state.submitCalled === false\n        ) {\n            this.setState(state => ({\n                [field]: {\n                    ...state[field],\n                    validateOnChange: true,\n                    error: validationFunc(pass, state[field].value)\n                }\n            }));\n        }\n        return;\n    }\n\n    /*\n     * validate all fields\n     * check if all fields are valid if yes then submit the Form\n     * otherwise set errors for the feilds in the state\n     */\n    handleSubmit(evt) {\n        evt.preventDefault();\n        // validate all fields\n        const { name, email, password, confirmPassword } = this.state;\n        const nameError = validateFields.validateName(name.value);\n        const emailError = validateFields.validateEmail(email.value);\n        const passwordError = validateFields.validatePassword(password.value);\n        console.log(`handle submit ${confirmPassword.value} ${password.value} `)\n        const confirmPasswordError = validateFields.validateConfirmPassword(password.value, confirmPassword.value);\n        if ([nameError, emailError, passwordError, confirmPasswordError].every(e => e === false)) {\n            // no errors submit the form\n            this.registerFunction(name.value, email.value, password.value);\n\n            // clear state and show all fields are validated\n            this.setState({ ...initialState, allFieldsValidated: true });\n            this.showAllFieldsValidated();\n        } else {\n            // update the state with errors\n            this.setState(state => ({\n                name: {\n                    ...state.name,\n                    validateOnChange: true,\n                    error: nameError\n                },\n                email: {\n                    ...state.email,\n                    validateOnChange: true,\n                    error: emailError\n                },\n                password: {\n                    ...state.password,\n                    validateOnChange: true,\n                    error: passwordError\n                },\n                confirmPassword: {\n                    ...state.confirmPassword,\n                    validateOnChange: true,\n                    error: confirmPasswordError\n                }\n            }));\n        }\n    }\n\n    showAllFieldsValidated() {\n        setTimeout(() => {\n            this.setState({ allFieldsValidated: false });\n        }, 1500);\n    }\n\n    moveToLogin() {\n        window.location.href = \"/login/\"\n    }\n\n\n\n    render() {\n        const { name, email, password, confirmPassword, allFieldsValidated } = this.state;\n        return (\n            <div className=\"Form col-md-8 col-lg-6\">\n                <div className=\"card\">\n\n                    <h4 className=\"card-title text-center\">Sign Up</h4>\n\n\n                    <div className=\"card-body\">\n                        {allFieldsValidated && (\n                            <p className=\"text-success text-center\">\n                                Success, All fields are validated\n                            </p>\n                        )}\n\n                        {/* Form Starts Here */}\n                        <form onSubmit={evt => this.handleSubmit(evt)}>\n\n                            {/* Name field */}\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    value={name.value}\n                                    placeholder=\"Enter your name\"\n                                    className={classnames(\n                                        'form-control',\n                                        { 'is-valid': name.error === false },\n                                        { 'is-invalid': name.error }\n                                    )}\n                                    onChange={evt =>\n                                        this.handleChange(validateFields.validateName, evt)\n                                    }\n                                    onBlur={evt =>\n                                        this.handleBlur(validateFields.validateName, evt)\n                                    }\n                                />\n                                <div className=\"invalid-feedback\">{name.error}</div>\n                            </div>\n\n                            {/* Email field */}\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    value={email.value}\n                                    placeholder=\"Enter your email\"\n                                    className={classnames(\n                                        'form-control',\n                                        { 'is-valid': email.error === false },\n                                        { 'is-invalid': email.error }\n                                    )}\n                                    onChange={evt =>\n                                        this.handleChange(validateFields.validateEmail, evt)\n                                    }\n                                    onBlur={evt =>\n                                        this.handleBlur(validateFields.validateEmail, evt)\n                                    }\n                                />\n                                <div className=\"invalid-feedback\">{email.error}</div>\n                            </div>\n\n                            {/* Password field */}\n                            <div className=\"form-group\">\n                                <input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    value={password.value}\n                                    placeholder=\"Enter your password\"\n                                    className={classnames(\n                                        'form-control',\n                                        { 'is-valid': password.error === false },\n                                        { 'is-invalid': password.error }\n                                    )}\n                                    onChange={evt =>\n                                        this.handleChange(validateFields.validatePassword, evt)\n                                    }\n                                    onBlur={evt =>\n                                        this.handleBlur(validateFields.validatePassword, evt)\n                                    }\n                                />\n                                <div className=\"invalid-feedback\">{password.error}</div>\n                            </div>\n                            {/* ConfirmPassword field */}\n                            <div className=\"form-group\">\n\n                                <input\n                                    type=\"password\"\n                                    name=\"confirmPassword\"\n                                    value={confirmPassword.value}\n                                    placeholder=\"Confirm\"\n                                    className={classnames(\n                                        'form-control',\n                                        { 'is-valid': confirmPassword.error === false },\n                                        { 'is-invalid': confirmPassword.error }\n                                    )}\n                                    onChange={evt =>\n                                        this.handleConfirmPassChange(validateFields.validateConfirmPassword, evt, password.value)\n                                    }\n                                    onBlur={evt =>\n                                        this.handleConfirmPassBlur(validateFields.validateConfirmPassword, evt, password.value)\n                                    }\n                                />\n                                <div className=\"invalid-feedback\">{confirmPassword.error}</div>\n                            </div>\n\n\n                            <button className=\"btn btn-light \"\n                                onClick={this.moveToLogin}\n                                style={{ margin: '25px' }}>\n                                Login\n                            </button>\n\n\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary \"\n                                onMouseDown={() => this.setState({ submitCalled: true })}>\n                                Sign Up\n                            </button>\n\n\n\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Register;","/home/rashad/Downloads/StockApp/stock-app/src/Components/Validation.js",[],["49","50"],{"ruleId":"51","severity":1,"message":"52","line":7,"column":8,"nodeType":"53","messageId":"54","endLine":7,"endColumn":17},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"51","severity":1,"message":"59","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"60","line":3,"column":29,"nodeType":"53","messageId":"54","endLine":3,"endColumn":35},{"ruleId":"51","severity":1,"message":"61","line":3,"column":37,"nodeType":"53","messageId":"54","endLine":3,"endColumn":46},{"ruleId":"51","severity":1,"message":"62","line":3,"column":48,"nodeType":"53","messageId":"54","endLine":3,"endColumn":59},{"ruleId":"63","severity":1,"message":"64","line":47,"column":13,"nodeType":"53","messageId":"65","endLine":47,"endColumn":17},{"ruleId":"63","severity":1,"message":"66","line":48,"column":13,"nodeType":"53","messageId":"65","endLine":48,"endColumn":18},{"ruleId":"55","replacedBy":"67"},{"ruleId":"57","replacedBy":"68"},"no-unused-vars","'bootstrap' is defined but never used.","Identifier","unusedVar","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"'logo' is defined but never used.","'Themes' is defined but never used.","'BarStyles' is defined but never used.","'HEIKIN_ASHI' is defined but never used.","no-redeclare","'name' is already defined.","redeclared","'email' is already defined.",["69"],["70"],"no-global-assign","no-unsafe-negation"]